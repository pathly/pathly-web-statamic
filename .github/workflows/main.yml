name: CI

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        working-directory: statamic/
        run: composer install --no-progress

      - name: Install Node dependencies
        working-directory: statamic/
        run: npm install

      - name: Run Node build
        working-directory: statamic/
        run: npm run production

      - name: Create archive
        run: tar czf build.tar.gz statamic/

      - name: 
        uses: actions/upload-artifact@v2
        
        with:
          name: build-archive
          path: build.tar.gz

  deploy_prod:
    needs: build
    runs-on: ubuntu-latest
    concurrency: production
    if: ${{ env.GITHUB_REF_NAME == 'master' }}
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_FINGERPRINT: ${{ secrets.SSH_FINGERPRINT }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-archive

      - name: Prepare .ssh
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add fingerprint of remote host
        run: |
          echo "$SSH_FINGERPRINT" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Add SSH private key
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create necessary folders on remote machine
        run: |
            ssh -p$SSH_PORT $SSH_USER@$SSH_HOST << CODE
              mkdir -p ~/releases/uploading
              mkdir -p ~/releases/current
              mkdir -p ~/shared
            CODE

      - name: Transfer build archive to remote machine
        run: rsync -azP --rsh="ssh -p$SSH_PORT" build.tar.gz $SSH_USER@$SSH_HOST:~/releases/uploading

      - name: Deploy build
        run: |
          ssh -p$SSH_PORT $SSH_USER@$SSH_HOST << CODE
            cd ~/releases/uploading

            # Extract build archive
            tar xzf build.tar.gz

            # Move build to releases directory
            mv statamic next
            cp -r next ~/releases/

            # Remove uploaded build archive
            rm -rf ~/releases/uploading

            # Add .env file
            cd ~/releases/next
            ln -sfn ~/shared/.env .env

            # Prepare Statamic
            cd ~/releases/next
            php please route:clear
            php please cache:clear
            php please view:clear
            php please config:clear

            # Replace previous release with next one
            mv ~/releases/current ~/releases/previous
            mv ~/releases/next ~/releases/current

            # Remove previous release
            rm -rf ~/releases/previous
          CODE

  deploy_dev:
    needs: build
    runs-on: ubuntu-latest
    concurrency: development
    if: ${{ env.GITHUB_REF_NAME == 'development' }}
    env:
      SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
      SSH_PORT: ${{ secrets.DEV_SSH_PORT }}
      SSH_USER: ${{ secrets.DEV_SSH_USER }}
      SSH_FINGERPRINT: ${{ secrets.DEV_SSH_FINGERPRINT }}
      SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-archive

      - name: Prepare .ssh
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add fingerprint of remote host
        run: |
          echo "$SSH_FINGERPRINT" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Add SSH private key
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create necessary folders on remote machine
        run: |
            ssh -p$SSH_PORT $SSH_USER@$SSH_HOST << CODE
              mkdir -p ~/releases/uploading
              mkdir -p ~/releases/current
              mkdir -p ~/shared
            CODE

      - name: Transfer build archive to remote machine
        run: rsync -azP --rsh="ssh -p$SSH_PORT" build.tar.gz $SSH_USER@$SSH_HOST:~/releases/uploading

      - name: Deploy build
        run: |
          ssh -p$SSH_PORT $SSH_USER@$SSH_HOST << CODE
            cd ~/releases/uploading

            # Extract build archive
            tar xzf build.tar.gz

            # Move build to releases directory
            mv statamic next
            cp -r next ~/releases/

            # Remove uploaded build archive
            rm -rf ~/releases/uploading

            # Add .env file
            cd ~/releases/next
            ln -sfn ~/shared/.env .env

            # Prepare Statamic
            cd ~/releases/next
            php please route:clear
            php please cache:clear
            php please view:clear
            php please config:clear

            # Replace previous release with next one
            mv ~/releases/current ~/releases/previous
            mv ~/releases/next ~/releases/current

            # Remove previous release
            rm -rf ~/releases/previous
          CODE
